{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","slice","map","genre","index","key","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVAgCeA,MA7Bf,YACA,EADgBC,GACf,IADmBC,EACpB,EADoBA,KAAMC,EAC1B,EAD0BA,MAAOC,EACjC,EADiCA,QAASC,EAC1C,EAD0CA,OAAQC,EAClD,EADkDA,OAG9C,OACA,yBAAKC,UAAU,SAGX,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eAEX,wBAAIA,UAAU,gBAAd,IAA+BJ,EAA/B,KACA,wBAAII,UAAU,eAAd,KAA+BL,GAC/B,uBAAGK,UAAU,kBAAb,IAAgCH,EAAQM,MAAM,EAAE,KAAhD,OACA,wBAAIH,UAAU,iBAAiBD,EAAOK,KAAK,SAACC,EAAMC,GAAP,OAAiB,wBAAIC,IAAKD,EAAON,UAAU,iBAAiBK,UCqCpGG,G,kNA5CbC,MAAQ,CACNC,WAAW,EACVC,OAAO,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEAE8BC,IAAMC,IAAI,yDAFxC,gBAEYJ,EAFZ,EAEHK,KAAOA,KAAQL,OACtB,EAAKM,SAAU,CAACN,SAAQD,WAAU,IAHxB,2C,kEAQVQ,KAAKN,c,+BAIN,IAAD,EAC6BM,KAAKT,MAAzBC,EADT,EACSA,UAAUC,EADnB,EACmBA,OACjB,OACA,6BAASX,UAAU,aAEjBU,EAEI,yBAAKV,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAKJ,yBAAKA,UAAU,UAEXW,EAAOP,KAAI,SAAAe,GAAK,OACjB,kBAAC,EAAD,CAAOZ,IAAKY,EAAMzB,GAAIA,GAAIyB,EAAMzB,GAAIC,KAAMwB,EAAMxB,KAAMC,MAAOuB,EAAMvB,MAAOC,QAASsB,EAAMtB,QAASC,OAAQqB,EAAMC,mBAAoBrB,OAAQoB,EAAMpB,kB,GArC3IsB,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a55d6bf3.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport \"./Movie.css\"\r\nfunction Movie({id, year, title, summary, poster, genres}) \r\n{\r\n    \r\n    return ( \r\n    <div className=\"movie\">\r\n        \r\n        \r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n            \r\n            <h3 className=\"movie__title\"> {title} </h3>\r\n            <h5 className=\"movie__year\">  {year}</h5>\r\n            <p className=\"movie__summary\"> {summary.slice(0,180)}...</p>\r\n            <ul className=\"movie__genres\">{genres.map( (genre,index) => <li key={index} className=\"genres__genre\">{genre}</li> )}</ul>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n\r\n        id : PropTypes.number.isRequired\r\n        , year : PropTypes.number.isRequired\r\n        , title : PropTypes.string.isRequired\r\n        , summary : PropTypes.string.isRequired\r\n        , poster : PropTypes.string.isRequired\r\n        , genres : PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;\r\n","import React from 'react';\nimport PropTypes from \"prop-types\"\nimport axios from \"axios\"\nimport Movie from \"./Movie\"\n\nimport \"./App.css\"\nclass App extends React.Component\n{\n  \n  state = {\n    isLoading: true\n    ,movies:[]\n  }\n\n  \n  getMovies = async () => {\n    //const movies = await axios.get(\"https://yts.mx/api/v2/list_movies.json\")\n    const {data: {data : {movies}}} = await axios.get(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\")\n    this.setState( {movies, isLoading:false})\n  }\n\n  componentDidMount()\n  {\n    this.getMovies();\n  }\n\n  render()\n  {\n    const {isLoading,movies} = this.state;\n    return (\n    <section className=\"container\">\n      {\n      isLoading ? \n        (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        )\n      \n      : (\n        <div className=\"movies\">\n          {\n            movies.map(movie => (\n           <Movie key={movie.id} id={movie.id} year={movie.year} title={movie.title} summary={movie.summary} poster={movie.medium_cover_image} genres={movie.genres}/>\n           ))}\n        </div>\n      )}\n    </section>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}